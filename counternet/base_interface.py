# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00b_interface.ipynb (unless otherwise specified).

__all__ = ['ExplainerBase', 'LocalExplainerBase', 'GlobalExplainerBase', 'ABCBaseModule']

# Cell
from .import_essentials import *

# Cell
class ExplainerBase(ABC):
    @abstractmethod
    def generate_cf(self, x: torch.Tensor):
        pass

# Cell
class LocalExplainerBase(nn.Module, ExplainerBase):
    def __init__(self, pred_fn: Callable[[torch.Tensor], torch.Tensor], configs: Dict[str, Any]={}):
        super().__init__()
        self.pred_fn = pred_fn
        self.configs = configs

    def forward(self):
        raise NotImplementedError

    def configure_optimizers(self):
        return torch.optim.Adam([self.cf], lr=0.001)

# Cell
class GlobalExplainerBase(ExplainerBase):
    pass

# Cell
class ABCBaseModule(ABC):
    @abstractmethod
    def model_forward(self, *x):
        raise NotImplementedError

    @abstractmethod
    def forward(self, *x):
        raise NotImplementedError

    @abstractmethod
    def predict(self, *x):
        raise NotImplementedError